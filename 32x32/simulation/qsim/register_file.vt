// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/20/2021 11:31:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    register_file
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_file_vlg_sample_tst(
	ADD0,
	ADD1,
	ADD2,
	ADD3,
	ADD4,
	ADD20,
	ADD21,
	ADD22,
	ADD23,
	ADD24,
	ADD30,
	ADD31,
	ADD32,
	ADD33,
	ADD34,
	CLK,
	INPUT,
	READ_EN_A,
	READ_EN_B,
	WE,
	sampler_tx
);
input  ADD0;
input  ADD1;
input  ADD2;
input  ADD3;
input  ADD4;
input  ADD20;
input  ADD21;
input  ADD22;
input  ADD23;
input  ADD24;
input  ADD30;
input  ADD31;
input  ADD32;
input  ADD33;
input  ADD34;
input  CLK;
input [31:0] INPUT;
input  READ_EN_A;
input  READ_EN_B;
input  WE;
output sampler_tx;

reg sample;
time current_time;
always @(ADD0 or ADD1 or ADD2 or ADD3 or ADD4 or ADD20 or ADD21 or ADD22 or ADD23 or ADD24 or ADD30 or ADD31 or ADD32 or ADD33 or ADD34 or CLK or INPUT or READ_EN_A or READ_EN_B or WE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module register_file_vlg_check_tst (
	OUTA,
	OUTB,
	sampler_rx
);
input [31:0] OUTA;
input [31:0] OUTB;
input sampler_rx;

reg [31:0] OUTA_expected;
reg [31:0] OUTB_expected;

reg [31:0] OUTA_prev;
reg [31:0] OUTB_prev;

reg [31:0] OUTA_expected_prev;
reg [31:0] OUTB_expected_prev;

reg [31:0] last_OUTA_exp;
reg [31:0] last_OUTB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUTA_prev = OUTA;
	OUTB_prev = OUTB;
end

// update expected /o prevs

always @(trigger)
begin
	OUTA_expected_prev = OUTA_expected;
	OUTB_expected_prev = OUTB_expected;
end


// expected OUTA[ 31 ]
initial
begin
	OUTA_expected[31] = 1'bX;
end 
// expected OUTA[ 30 ]
initial
begin
	OUTA_expected[30] = 1'bX;
end 
// expected OUTA[ 29 ]
initial
begin
	OUTA_expected[29] = 1'bX;
end 
// expected OUTA[ 28 ]
initial
begin
	OUTA_expected[28] = 1'bX;
end 
// expected OUTA[ 27 ]
initial
begin
	OUTA_expected[27] = 1'bX;
end 
// expected OUTA[ 26 ]
initial
begin
	OUTA_expected[26] = 1'bX;
end 
// expected OUTA[ 25 ]
initial
begin
	OUTA_expected[25] = 1'bX;
end 
// expected OUTA[ 24 ]
initial
begin
	OUTA_expected[24] = 1'bX;
end 
// expected OUTA[ 23 ]
initial
begin
	OUTA_expected[23] = 1'bX;
end 
// expected OUTA[ 22 ]
initial
begin
	OUTA_expected[22] = 1'bX;
end 
// expected OUTA[ 21 ]
initial
begin
	OUTA_expected[21] = 1'bX;
end 
// expected OUTA[ 20 ]
initial
begin
	OUTA_expected[20] = 1'bX;
end 
// expected OUTA[ 19 ]
initial
begin
	OUTA_expected[19] = 1'bX;
end 
// expected OUTA[ 18 ]
initial
begin
	OUTA_expected[18] = 1'bX;
end 
// expected OUTA[ 17 ]
initial
begin
	OUTA_expected[17] = 1'bX;
end 
// expected OUTA[ 16 ]
initial
begin
	OUTA_expected[16] = 1'bX;
end 
// expected OUTA[ 15 ]
initial
begin
	OUTA_expected[15] = 1'bX;
end 
// expected OUTA[ 14 ]
initial
begin
	OUTA_expected[14] = 1'bX;
end 
// expected OUTA[ 13 ]
initial
begin
	OUTA_expected[13] = 1'bX;
end 
// expected OUTA[ 12 ]
initial
begin
	OUTA_expected[12] = 1'bX;
end 
// expected OUTA[ 11 ]
initial
begin
	OUTA_expected[11] = 1'bX;
end 
// expected OUTA[ 10 ]
initial
begin
	OUTA_expected[10] = 1'bX;
end 
// expected OUTA[ 9 ]
initial
begin
	OUTA_expected[9] = 1'bX;
end 
// expected OUTA[ 8 ]
initial
begin
	OUTA_expected[8] = 1'bX;
end 
// expected OUTA[ 7 ]
initial
begin
	OUTA_expected[7] = 1'bX;
end 
// expected OUTA[ 6 ]
initial
begin
	OUTA_expected[6] = 1'bX;
end 
// expected OUTA[ 5 ]
initial
begin
	OUTA_expected[5] = 1'bX;
end 
// expected OUTA[ 4 ]
initial
begin
	OUTA_expected[4] = 1'bX;
end 
// expected OUTA[ 3 ]
initial
begin
	OUTA_expected[3] = 1'bX;
end 
// expected OUTA[ 2 ]
initial
begin
	OUTA_expected[2] = 1'bX;
end 
// expected OUTA[ 1 ]
initial
begin
	OUTA_expected[1] = 1'bX;
end 
// expected OUTA[ 0 ]
initial
begin
	OUTA_expected[0] = 1'bX;
end 
// expected OUTB[ 31 ]
initial
begin
	OUTB_expected[31] = 1'bX;
end 
// expected OUTB[ 30 ]
initial
begin
	OUTB_expected[30] = 1'bX;
end 
// expected OUTB[ 29 ]
initial
begin
	OUTB_expected[29] = 1'bX;
end 
// expected OUTB[ 28 ]
initial
begin
	OUTB_expected[28] = 1'bX;
end 
// expected OUTB[ 27 ]
initial
begin
	OUTB_expected[27] = 1'bX;
end 
// expected OUTB[ 26 ]
initial
begin
	OUTB_expected[26] = 1'bX;
end 
// expected OUTB[ 25 ]
initial
begin
	OUTB_expected[25] = 1'bX;
end 
// expected OUTB[ 24 ]
initial
begin
	OUTB_expected[24] = 1'bX;
end 
// expected OUTB[ 23 ]
initial
begin
	OUTB_expected[23] = 1'bX;
end 
// expected OUTB[ 22 ]
initial
begin
	OUTB_expected[22] = 1'bX;
end 
// expected OUTB[ 21 ]
initial
begin
	OUTB_expected[21] = 1'bX;
end 
// expected OUTB[ 20 ]
initial
begin
	OUTB_expected[20] = 1'bX;
end 
// expected OUTB[ 19 ]
initial
begin
	OUTB_expected[19] = 1'bX;
end 
// expected OUTB[ 18 ]
initial
begin
	OUTB_expected[18] = 1'bX;
end 
// expected OUTB[ 17 ]
initial
begin
	OUTB_expected[17] = 1'bX;
end 
// expected OUTB[ 16 ]
initial
begin
	OUTB_expected[16] = 1'bX;
end 
// expected OUTB[ 15 ]
initial
begin
	OUTB_expected[15] = 1'bX;
end 
// expected OUTB[ 14 ]
initial
begin
	OUTB_expected[14] = 1'bX;
end 
// expected OUTB[ 13 ]
initial
begin
	OUTB_expected[13] = 1'bX;
end 
// expected OUTB[ 12 ]
initial
begin
	OUTB_expected[12] = 1'bX;
end 
// expected OUTB[ 11 ]
initial
begin
	OUTB_expected[11] = 1'bX;
end 
// expected OUTB[ 10 ]
initial
begin
	OUTB_expected[10] = 1'bX;
end 
// expected OUTB[ 9 ]
initial
begin
	OUTB_expected[9] = 1'bX;
end 
// expected OUTB[ 8 ]
initial
begin
	OUTB_expected[8] = 1'bX;
end 
// expected OUTB[ 7 ]
initial
begin
	OUTB_expected[7] = 1'bX;
end 
// expected OUTB[ 6 ]
initial
begin
	OUTB_expected[6] = 1'bX;
end 
// expected OUTB[ 5 ]
initial
begin
	OUTB_expected[5] = 1'bX;
end 
// expected OUTB[ 4 ]
initial
begin
	OUTB_expected[4] = 1'bX;
end 
// expected OUTB[ 3 ]
initial
begin
	OUTB_expected[3] = 1'bX;
end 
// expected OUTB[ 2 ]
initial
begin
	OUTB_expected[2] = 1'bX;
end 
// expected OUTB[ 1 ]
initial
begin
	OUTB_expected[1] = 1'bX;
end 
// expected OUTB[ 0 ]
initial
begin
	OUTB_expected[0] = 1'bX;
end 
// generate trigger
always @(OUTA_expected or OUTA or OUTB_expected or OUTB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUTA = %b | expected OUTB = %b | ",OUTA_expected_prev,OUTB_expected_prev);
	$display("| real OUTA = %b | real OUTB = %b | ",OUTA_prev,OUTB_prev);
`endif
	if (
		( OUTA_expected_prev[0] !== 1'bx ) && ( OUTA_prev[0] !== OUTA_expected_prev[0] )
		&& ((OUTA_expected_prev[0] !== last_OUTA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[0] = OUTA_expected_prev[0];
	end
	if (
		( OUTA_expected_prev[1] !== 1'bx ) && ( OUTA_prev[1] !== OUTA_expected_prev[1] )
		&& ((OUTA_expected_prev[1] !== last_OUTA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[1] = OUTA_expected_prev[1];
	end
	if (
		( OUTA_expected_prev[2] !== 1'bx ) && ( OUTA_prev[2] !== OUTA_expected_prev[2] )
		&& ((OUTA_expected_prev[2] !== last_OUTA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[2] = OUTA_expected_prev[2];
	end
	if (
		( OUTA_expected_prev[3] !== 1'bx ) && ( OUTA_prev[3] !== OUTA_expected_prev[3] )
		&& ((OUTA_expected_prev[3] !== last_OUTA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[3] = OUTA_expected_prev[3];
	end
	if (
		( OUTA_expected_prev[4] !== 1'bx ) && ( OUTA_prev[4] !== OUTA_expected_prev[4] )
		&& ((OUTA_expected_prev[4] !== last_OUTA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[4] = OUTA_expected_prev[4];
	end
	if (
		( OUTA_expected_prev[5] !== 1'bx ) && ( OUTA_prev[5] !== OUTA_expected_prev[5] )
		&& ((OUTA_expected_prev[5] !== last_OUTA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[5] = OUTA_expected_prev[5];
	end
	if (
		( OUTA_expected_prev[6] !== 1'bx ) && ( OUTA_prev[6] !== OUTA_expected_prev[6] )
		&& ((OUTA_expected_prev[6] !== last_OUTA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[6] = OUTA_expected_prev[6];
	end
	if (
		( OUTA_expected_prev[7] !== 1'bx ) && ( OUTA_prev[7] !== OUTA_expected_prev[7] )
		&& ((OUTA_expected_prev[7] !== last_OUTA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[7] = OUTA_expected_prev[7];
	end
	if (
		( OUTA_expected_prev[8] !== 1'bx ) && ( OUTA_prev[8] !== OUTA_expected_prev[8] )
		&& ((OUTA_expected_prev[8] !== last_OUTA_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[8] = OUTA_expected_prev[8];
	end
	if (
		( OUTA_expected_prev[9] !== 1'bx ) && ( OUTA_prev[9] !== OUTA_expected_prev[9] )
		&& ((OUTA_expected_prev[9] !== last_OUTA_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[9] = OUTA_expected_prev[9];
	end
	if (
		( OUTA_expected_prev[10] !== 1'bx ) && ( OUTA_prev[10] !== OUTA_expected_prev[10] )
		&& ((OUTA_expected_prev[10] !== last_OUTA_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[10] = OUTA_expected_prev[10];
	end
	if (
		( OUTA_expected_prev[11] !== 1'bx ) && ( OUTA_prev[11] !== OUTA_expected_prev[11] )
		&& ((OUTA_expected_prev[11] !== last_OUTA_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[11] = OUTA_expected_prev[11];
	end
	if (
		( OUTA_expected_prev[12] !== 1'bx ) && ( OUTA_prev[12] !== OUTA_expected_prev[12] )
		&& ((OUTA_expected_prev[12] !== last_OUTA_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[12] = OUTA_expected_prev[12];
	end
	if (
		( OUTA_expected_prev[13] !== 1'bx ) && ( OUTA_prev[13] !== OUTA_expected_prev[13] )
		&& ((OUTA_expected_prev[13] !== last_OUTA_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[13] = OUTA_expected_prev[13];
	end
	if (
		( OUTA_expected_prev[14] !== 1'bx ) && ( OUTA_prev[14] !== OUTA_expected_prev[14] )
		&& ((OUTA_expected_prev[14] !== last_OUTA_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[14] = OUTA_expected_prev[14];
	end
	if (
		( OUTA_expected_prev[15] !== 1'bx ) && ( OUTA_prev[15] !== OUTA_expected_prev[15] )
		&& ((OUTA_expected_prev[15] !== last_OUTA_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[15] = OUTA_expected_prev[15];
	end
	if (
		( OUTA_expected_prev[16] !== 1'bx ) && ( OUTA_prev[16] !== OUTA_expected_prev[16] )
		&& ((OUTA_expected_prev[16] !== last_OUTA_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[16] = OUTA_expected_prev[16];
	end
	if (
		( OUTA_expected_prev[17] !== 1'bx ) && ( OUTA_prev[17] !== OUTA_expected_prev[17] )
		&& ((OUTA_expected_prev[17] !== last_OUTA_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[17] = OUTA_expected_prev[17];
	end
	if (
		( OUTA_expected_prev[18] !== 1'bx ) && ( OUTA_prev[18] !== OUTA_expected_prev[18] )
		&& ((OUTA_expected_prev[18] !== last_OUTA_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[18] = OUTA_expected_prev[18];
	end
	if (
		( OUTA_expected_prev[19] !== 1'bx ) && ( OUTA_prev[19] !== OUTA_expected_prev[19] )
		&& ((OUTA_expected_prev[19] !== last_OUTA_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[19] = OUTA_expected_prev[19];
	end
	if (
		( OUTA_expected_prev[20] !== 1'bx ) && ( OUTA_prev[20] !== OUTA_expected_prev[20] )
		&& ((OUTA_expected_prev[20] !== last_OUTA_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[20] = OUTA_expected_prev[20];
	end
	if (
		( OUTA_expected_prev[21] !== 1'bx ) && ( OUTA_prev[21] !== OUTA_expected_prev[21] )
		&& ((OUTA_expected_prev[21] !== last_OUTA_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[21] = OUTA_expected_prev[21];
	end
	if (
		( OUTA_expected_prev[22] !== 1'bx ) && ( OUTA_prev[22] !== OUTA_expected_prev[22] )
		&& ((OUTA_expected_prev[22] !== last_OUTA_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[22] = OUTA_expected_prev[22];
	end
	if (
		( OUTA_expected_prev[23] !== 1'bx ) && ( OUTA_prev[23] !== OUTA_expected_prev[23] )
		&& ((OUTA_expected_prev[23] !== last_OUTA_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[23] = OUTA_expected_prev[23];
	end
	if (
		( OUTA_expected_prev[24] !== 1'bx ) && ( OUTA_prev[24] !== OUTA_expected_prev[24] )
		&& ((OUTA_expected_prev[24] !== last_OUTA_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[24] = OUTA_expected_prev[24];
	end
	if (
		( OUTA_expected_prev[25] !== 1'bx ) && ( OUTA_prev[25] !== OUTA_expected_prev[25] )
		&& ((OUTA_expected_prev[25] !== last_OUTA_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[25] = OUTA_expected_prev[25];
	end
	if (
		( OUTA_expected_prev[26] !== 1'bx ) && ( OUTA_prev[26] !== OUTA_expected_prev[26] )
		&& ((OUTA_expected_prev[26] !== last_OUTA_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[26] = OUTA_expected_prev[26];
	end
	if (
		( OUTA_expected_prev[27] !== 1'bx ) && ( OUTA_prev[27] !== OUTA_expected_prev[27] )
		&& ((OUTA_expected_prev[27] !== last_OUTA_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[27] = OUTA_expected_prev[27];
	end
	if (
		( OUTA_expected_prev[28] !== 1'bx ) && ( OUTA_prev[28] !== OUTA_expected_prev[28] )
		&& ((OUTA_expected_prev[28] !== last_OUTA_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[28] = OUTA_expected_prev[28];
	end
	if (
		( OUTA_expected_prev[29] !== 1'bx ) && ( OUTA_prev[29] !== OUTA_expected_prev[29] )
		&& ((OUTA_expected_prev[29] !== last_OUTA_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[29] = OUTA_expected_prev[29];
	end
	if (
		( OUTA_expected_prev[30] !== 1'bx ) && ( OUTA_prev[30] !== OUTA_expected_prev[30] )
		&& ((OUTA_expected_prev[30] !== last_OUTA_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[30] = OUTA_expected_prev[30];
	end
	if (
		( OUTA_expected_prev[31] !== 1'bx ) && ( OUTA_prev[31] !== OUTA_expected_prev[31] )
		&& ((OUTA_expected_prev[31] !== last_OUTA_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTA_expected_prev);
		$display ("     Real value = %b", OUTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTA_exp[31] = OUTA_expected_prev[31];
	end
	if (
		( OUTB_expected_prev[0] !== 1'bx ) && ( OUTB_prev[0] !== OUTB_expected_prev[0] )
		&& ((OUTB_expected_prev[0] !== last_OUTB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[0] = OUTB_expected_prev[0];
	end
	if (
		( OUTB_expected_prev[1] !== 1'bx ) && ( OUTB_prev[1] !== OUTB_expected_prev[1] )
		&& ((OUTB_expected_prev[1] !== last_OUTB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[1] = OUTB_expected_prev[1];
	end
	if (
		( OUTB_expected_prev[2] !== 1'bx ) && ( OUTB_prev[2] !== OUTB_expected_prev[2] )
		&& ((OUTB_expected_prev[2] !== last_OUTB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[2] = OUTB_expected_prev[2];
	end
	if (
		( OUTB_expected_prev[3] !== 1'bx ) && ( OUTB_prev[3] !== OUTB_expected_prev[3] )
		&& ((OUTB_expected_prev[3] !== last_OUTB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[3] = OUTB_expected_prev[3];
	end
	if (
		( OUTB_expected_prev[4] !== 1'bx ) && ( OUTB_prev[4] !== OUTB_expected_prev[4] )
		&& ((OUTB_expected_prev[4] !== last_OUTB_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[4] = OUTB_expected_prev[4];
	end
	if (
		( OUTB_expected_prev[5] !== 1'bx ) && ( OUTB_prev[5] !== OUTB_expected_prev[5] )
		&& ((OUTB_expected_prev[5] !== last_OUTB_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[5] = OUTB_expected_prev[5];
	end
	if (
		( OUTB_expected_prev[6] !== 1'bx ) && ( OUTB_prev[6] !== OUTB_expected_prev[6] )
		&& ((OUTB_expected_prev[6] !== last_OUTB_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[6] = OUTB_expected_prev[6];
	end
	if (
		( OUTB_expected_prev[7] !== 1'bx ) && ( OUTB_prev[7] !== OUTB_expected_prev[7] )
		&& ((OUTB_expected_prev[7] !== last_OUTB_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[7] = OUTB_expected_prev[7];
	end
	if (
		( OUTB_expected_prev[8] !== 1'bx ) && ( OUTB_prev[8] !== OUTB_expected_prev[8] )
		&& ((OUTB_expected_prev[8] !== last_OUTB_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[8] = OUTB_expected_prev[8];
	end
	if (
		( OUTB_expected_prev[9] !== 1'bx ) && ( OUTB_prev[9] !== OUTB_expected_prev[9] )
		&& ((OUTB_expected_prev[9] !== last_OUTB_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[9] = OUTB_expected_prev[9];
	end
	if (
		( OUTB_expected_prev[10] !== 1'bx ) && ( OUTB_prev[10] !== OUTB_expected_prev[10] )
		&& ((OUTB_expected_prev[10] !== last_OUTB_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[10] = OUTB_expected_prev[10];
	end
	if (
		( OUTB_expected_prev[11] !== 1'bx ) && ( OUTB_prev[11] !== OUTB_expected_prev[11] )
		&& ((OUTB_expected_prev[11] !== last_OUTB_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[11] = OUTB_expected_prev[11];
	end
	if (
		( OUTB_expected_prev[12] !== 1'bx ) && ( OUTB_prev[12] !== OUTB_expected_prev[12] )
		&& ((OUTB_expected_prev[12] !== last_OUTB_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[12] = OUTB_expected_prev[12];
	end
	if (
		( OUTB_expected_prev[13] !== 1'bx ) && ( OUTB_prev[13] !== OUTB_expected_prev[13] )
		&& ((OUTB_expected_prev[13] !== last_OUTB_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[13] = OUTB_expected_prev[13];
	end
	if (
		( OUTB_expected_prev[14] !== 1'bx ) && ( OUTB_prev[14] !== OUTB_expected_prev[14] )
		&& ((OUTB_expected_prev[14] !== last_OUTB_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[14] = OUTB_expected_prev[14];
	end
	if (
		( OUTB_expected_prev[15] !== 1'bx ) && ( OUTB_prev[15] !== OUTB_expected_prev[15] )
		&& ((OUTB_expected_prev[15] !== last_OUTB_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[15] = OUTB_expected_prev[15];
	end
	if (
		( OUTB_expected_prev[16] !== 1'bx ) && ( OUTB_prev[16] !== OUTB_expected_prev[16] )
		&& ((OUTB_expected_prev[16] !== last_OUTB_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[16] = OUTB_expected_prev[16];
	end
	if (
		( OUTB_expected_prev[17] !== 1'bx ) && ( OUTB_prev[17] !== OUTB_expected_prev[17] )
		&& ((OUTB_expected_prev[17] !== last_OUTB_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[17] = OUTB_expected_prev[17];
	end
	if (
		( OUTB_expected_prev[18] !== 1'bx ) && ( OUTB_prev[18] !== OUTB_expected_prev[18] )
		&& ((OUTB_expected_prev[18] !== last_OUTB_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[18] = OUTB_expected_prev[18];
	end
	if (
		( OUTB_expected_prev[19] !== 1'bx ) && ( OUTB_prev[19] !== OUTB_expected_prev[19] )
		&& ((OUTB_expected_prev[19] !== last_OUTB_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[19] = OUTB_expected_prev[19];
	end
	if (
		( OUTB_expected_prev[20] !== 1'bx ) && ( OUTB_prev[20] !== OUTB_expected_prev[20] )
		&& ((OUTB_expected_prev[20] !== last_OUTB_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[20] = OUTB_expected_prev[20];
	end
	if (
		( OUTB_expected_prev[21] !== 1'bx ) && ( OUTB_prev[21] !== OUTB_expected_prev[21] )
		&& ((OUTB_expected_prev[21] !== last_OUTB_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[21] = OUTB_expected_prev[21];
	end
	if (
		( OUTB_expected_prev[22] !== 1'bx ) && ( OUTB_prev[22] !== OUTB_expected_prev[22] )
		&& ((OUTB_expected_prev[22] !== last_OUTB_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[22] = OUTB_expected_prev[22];
	end
	if (
		( OUTB_expected_prev[23] !== 1'bx ) && ( OUTB_prev[23] !== OUTB_expected_prev[23] )
		&& ((OUTB_expected_prev[23] !== last_OUTB_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[23] = OUTB_expected_prev[23];
	end
	if (
		( OUTB_expected_prev[24] !== 1'bx ) && ( OUTB_prev[24] !== OUTB_expected_prev[24] )
		&& ((OUTB_expected_prev[24] !== last_OUTB_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[24] = OUTB_expected_prev[24];
	end
	if (
		( OUTB_expected_prev[25] !== 1'bx ) && ( OUTB_prev[25] !== OUTB_expected_prev[25] )
		&& ((OUTB_expected_prev[25] !== last_OUTB_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[25] = OUTB_expected_prev[25];
	end
	if (
		( OUTB_expected_prev[26] !== 1'bx ) && ( OUTB_prev[26] !== OUTB_expected_prev[26] )
		&& ((OUTB_expected_prev[26] !== last_OUTB_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[26] = OUTB_expected_prev[26];
	end
	if (
		( OUTB_expected_prev[27] !== 1'bx ) && ( OUTB_prev[27] !== OUTB_expected_prev[27] )
		&& ((OUTB_expected_prev[27] !== last_OUTB_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[27] = OUTB_expected_prev[27];
	end
	if (
		( OUTB_expected_prev[28] !== 1'bx ) && ( OUTB_prev[28] !== OUTB_expected_prev[28] )
		&& ((OUTB_expected_prev[28] !== last_OUTB_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[28] = OUTB_expected_prev[28];
	end
	if (
		( OUTB_expected_prev[29] !== 1'bx ) && ( OUTB_prev[29] !== OUTB_expected_prev[29] )
		&& ((OUTB_expected_prev[29] !== last_OUTB_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[29] = OUTB_expected_prev[29];
	end
	if (
		( OUTB_expected_prev[30] !== 1'bx ) && ( OUTB_prev[30] !== OUTB_expected_prev[30] )
		&& ((OUTB_expected_prev[30] !== last_OUTB_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[30] = OUTB_expected_prev[30];
	end
	if (
		( OUTB_expected_prev[31] !== 1'bx ) && ( OUTB_prev[31] !== OUTB_expected_prev[31] )
		&& ((OUTB_expected_prev[31] !== last_OUTB_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTB_expected_prev);
		$display ("     Real value = %b", OUTB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTB_exp[31] = OUTB_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module register_file_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADD0;
reg ADD1;
reg ADD2;
reg ADD3;
reg ADD4;
reg ADD20;
reg ADD21;
reg ADD22;
reg ADD23;
reg ADD24;
reg ADD30;
reg ADD31;
reg ADD32;
reg ADD33;
reg ADD34;
reg CLK;
reg [31:0] INPUT;
reg READ_EN_A;
reg READ_EN_B;
reg WE;
// wires                                               
wire [31:0] OUTA;
wire [31:0] OUTB;

wire sampler;                             

// assign statements (if any)                          
register_file i1 (
// port map - connection between master ports and signals/registers   
	.ADD0(ADD0),
	.ADD1(ADD1),
	.ADD2(ADD2),
	.ADD3(ADD3),
	.ADD4(ADD4),
	.ADD20(ADD20),
	.ADD21(ADD21),
	.ADD22(ADD22),
	.ADD23(ADD23),
	.ADD24(ADD24),
	.ADD30(ADD30),
	.ADD31(ADD31),
	.ADD32(ADD32),
	.ADD33(ADD33),
	.ADD34(ADD34),
	.CLK(CLK),
	.\INPUT (INPUT),
	.OUTA(OUTA),
	.OUTB(OUTB),
	.READ_EN_A(READ_EN_A),
	.READ_EN_B(READ_EN_B),
	.WE(WE)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// ADD0
initial
begin
	ADD0 = 1'b0;
	ADD0 = #640000 1'b1;
end 

// ADD1
initial
begin
	ADD1 = 1'b0;
	ADD1 = #320000 1'b1;
	ADD1 = #320000 1'b0;
	ADD1 = #320000 1'b1;
end 

// ADD2
initial
begin
	repeat(3)
	begin
		ADD2 = 1'b0;
		ADD2 = #160000 1'b1;
		# 160000;
	end
	ADD2 = 1'b0;
end 

// ADD3
initial
begin
	repeat(6)
	begin
		ADD3 = 1'b0;
		ADD3 = #80000 1'b1;
		# 80000;
	end
	ADD3 = 1'b0;
end 

// ADD4
initial
begin
	repeat(12)
	begin
		ADD4 = 1'b0;
		ADD4 = #40000 1'b1;
		# 40000;
	end
	ADD4 = 1'b0;
end 

// ADD20
initial
begin
	ADD20 = 1'b0;
	ADD20 = #640000 1'b1;
end 

// ADD21
initial
begin
	ADD21 = 1'b0;
	ADD21 = #320000 1'b1;
	ADD21 = #320000 1'b0;
	ADD21 = #320000 1'b1;
end 

// ADD22
initial
begin
	repeat(3)
	begin
		ADD22 = 1'b0;
		ADD22 = #160000 1'b1;
		# 160000;
	end
	ADD22 = 1'b0;
end 

// ADD23
initial
begin
	repeat(6)
	begin
		ADD23 = 1'b0;
		ADD23 = #80000 1'b1;
		# 80000;
	end
	ADD23 = 1'b0;
end 

// ADD24
initial
begin
	repeat(12)
	begin
		ADD24 = 1'b0;
		ADD24 = #40000 1'b1;
		# 40000;
	end
	ADD24 = 1'b0;
end 

// ADD30
initial
begin
	ADD30 = 1'b0;
	ADD30 = #640000 1'b1;
end 

// ADD31
initial
begin
	ADD31 = 1'b0;
	ADD31 = #320000 1'b1;
	ADD31 = #320000 1'b0;
	ADD31 = #320000 1'b1;
end 

// ADD32
initial
begin
	repeat(3)
	begin
		ADD32 = 1'b0;
		ADD32 = #160000 1'b1;
		# 160000;
	end
	ADD32 = 1'b0;
end 

// ADD33
initial
begin
	repeat(6)
	begin
		ADD33 = 1'b0;
		ADD33 = #80000 1'b1;
		# 80000;
	end
	ADD33 = 1'b0;
end 

// ADD34
initial
begin
	repeat(12)
	begin
		ADD34 = 1'b0;
		ADD34 = #40000 1'b1;
		# 40000;
	end
	ADD34 = 1'b0;
end 

// WE
initial
begin
	WE = 1'b1;
	WE = #80000 1'b0;
	WE = #80000 1'b1;
	WE = #160000 1'b0;
	WE = #160000 1'b1;
end 
// \INPUT [ 31 ]
initial
begin
	INPUT[31] = 1'b1;
	INPUT[31] = #20000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #20000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #80000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #20000 1'b0;
	INPUT[31] = #40000 1'b1;
	INPUT[31] = #20000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #20000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #20000 1'b0;
	INPUT[31] = #40000 1'b1;
	INPUT[31] = #40000 1'b0;
	INPUT[31] = #60000 1'b1;
	INPUT[31] = #40000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #20000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #60000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #20000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #40000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #60000 1'b0;
	INPUT[31] = #20000 1'b1;
	INPUT[31] = #60000 1'b0;
	INPUT[31] = #20000 1'b1;
end 
// \INPUT [ 30 ]
initial
begin
	INPUT[30] = 1'b0;
	INPUT[30] = #60000 1'b1;
	INPUT[30] = #20000 1'b0;
	INPUT[30] = #20000 1'b1;
	INPUT[30] = #40000 1'b0;
	INPUT[30] = #20000 1'b1;
	INPUT[30] = #40000 1'b0;
	INPUT[30] = #80000 1'b1;
	INPUT[30] = #20000 1'b0;
	INPUT[30] = #60000 1'b1;
	INPUT[30] = #60000 1'b0;
	INPUT[30] = #60000 1'b1;
	INPUT[30] = #20000 1'b0;
	INPUT[30] = #20000 1'b1;
	INPUT[30] = #20000 1'b0;
	INPUT[30] = #20000 1'b1;
	INPUT[30] = #20000 1'b0;
	INPUT[30] = #40000 1'b1;
	INPUT[30] = #120000 1'b0;
	INPUT[30] = #80000 1'b1;
	INPUT[30] = #60000 1'b0;
	INPUT[30] = #40000 1'b1;
	INPUT[30] = #20000 1'b0;
end 
// \INPUT [ 29 ]
initial
begin
	INPUT[29] = 1'b0;
	INPUT[29] = #20000 1'b1;
	INPUT[29] = #40000 1'b0;
	INPUT[29] = #20000 1'b1;
	INPUT[29] = #60000 1'b0;
	INPUT[29] = #60000 1'b1;
	INPUT[29] = #20000 1'b0;
	INPUT[29] = #20000 1'b1;
	INPUT[29] = #20000 1'b0;
	INPUT[29] = #20000 1'b1;
	INPUT[29] = #200000 1'b0;
	INPUT[29] = #20000 1'b1;
	INPUT[29] = #40000 1'b0;
	INPUT[29] = #40000 1'b1;
	INPUT[29] = #20000 1'b0;
	INPUT[29] = #80000 1'b1;
	INPUT[29] = #40000 1'b0;
	INPUT[29] = #20000 1'b1;
	INPUT[29] = #220000 1'b0;
	INPUT[29] = #20000 1'b1;
end 
// \INPUT [ 28 ]
initial
begin
	INPUT[28] = 1'b0;
	INPUT[28] = #20000 1'b1;
	INPUT[28] = #60000 1'b0;
	INPUT[28] = #20000 1'b1;
	INPUT[28] = #40000 1'b0;
	INPUT[28] = #20000 1'b1;
	INPUT[28] = #40000 1'b0;
	INPUT[28] = #60000 1'b1;
	INPUT[28] = #20000 1'b0;
	INPUT[28] = #20000 1'b1;
	INPUT[28] = #20000 1'b0;
	INPUT[28] = #40000 1'b1;
	INPUT[28] = #20000 1'b0;
	INPUT[28] = #40000 1'b1;
	INPUT[28] = #20000 1'b0;
	INPUT[28] = #120000 1'b1;
	INPUT[28] = #60000 1'b0;
	INPUT[28] = #40000 1'b1;
	INPUT[28] = #20000 1'b0;
	INPUT[28] = #120000 1'b1;
	INPUT[28] = #20000 1'b0;
	INPUT[28] = #40000 1'b1;
	INPUT[28] = #20000 1'b0;
end 
// \INPUT [ 27 ]
initial
begin
	INPUT[27] = 1'b0;
	INPUT[27] = #60000 1'b1;
	INPUT[27] = #20000 1'b0;
	INPUT[27] = #20000 1'b1;
	INPUT[27] = #20000 1'b0;
	INPUT[27] = #20000 1'b1;
	INPUT[27] = #20000 1'b0;
	INPUT[27] = #20000 1'b1;
	INPUT[27] = #20000 1'b0;
	INPUT[27] = #40000 1'b1;
	INPUT[27] = #20000 1'b0;
	INPUT[27] = #60000 1'b1;
	INPUT[27] = #40000 1'b0;
	INPUT[27] = #60000 1'b1;
	INPUT[27] = #40000 1'b0;
	INPUT[27] = #20000 1'b1;
	INPUT[27] = #20000 1'b0;
	INPUT[27] = #60000 1'b1;
	INPUT[27] = #80000 1'b0;
	INPUT[27] = #40000 1'b1;
	INPUT[27] = #20000 1'b0;
	INPUT[27] = #60000 1'b1;
	INPUT[27] = #40000 1'b0;
	INPUT[27] = #80000 1'b1;
	INPUT[27] = #100000 1'b0;
end 
// \INPUT [ 26 ]
initial
begin
	INPUT[26] = 1'b0;
	INPUT[26] = #60000 1'b1;
	INPUT[26] = #40000 1'b0;
	INPUT[26] = #40000 1'b1;
	INPUT[26] = #60000 1'b0;
	INPUT[26] = #20000 1'b1;
	INPUT[26] = #40000 1'b0;
	INPUT[26] = #140000 1'b1;
	INPUT[26] = #140000 1'b0;
	INPUT[26] = #20000 1'b1;
	INPUT[26] = #40000 1'b0;
	INPUT[26] = #80000 1'b1;
	INPUT[26] = #20000 1'b0;
	INPUT[26] = #140000 1'b1;
end 
// \INPUT [ 25 ]
initial
begin
	INPUT[25] = 1'b1;
	INPUT[25] = #20000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #20000 1'b0;
	INPUT[25] = #80000 1'b1;
	INPUT[25] = #60000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #20000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #20000 1'b0;
	INPUT[25] = #60000 1'b1;
	INPUT[25] = #20000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #100000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #40000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #60000 1'b0;
	INPUT[25] = #80000 1'b1;
	INPUT[25] = #20000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #60000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #20000 1'b0;
	INPUT[25] = #20000 1'b1;
	INPUT[25] = #20000 1'b0;
	INPUT[25] = #60000 1'b1;
	INPUT[25] = #40000 1'b0;
end 
// \INPUT [ 24 ]
initial
begin
	INPUT[24] = 1'b0;
	INPUT[24] = #40000 1'b1;
	INPUT[24] = #40000 1'b0;
	INPUT[24] = #20000 1'b1;
	INPUT[24] = #20000 1'b0;
	INPUT[24] = #40000 1'b1;
	INPUT[24] = #80000 1'b0;
	INPUT[24] = #20000 1'b1;
	INPUT[24] = #60000 1'b0;
	INPUT[24] = #40000 1'b1;
	INPUT[24] = #20000 1'b0;
	INPUT[24] = #20000 1'b1;
	INPUT[24] = #60000 1'b0;
	INPUT[24] = #60000 1'b1;
	INPUT[24] = #60000 1'b0;
	INPUT[24] = #100000 1'b1;
	INPUT[24] = #20000 1'b0;
	INPUT[24] = #60000 1'b1;
	INPUT[24] = #20000 1'b0;
	INPUT[24] = #20000 1'b1;
	INPUT[24] = #20000 1'b0;
	INPUT[24] = #20000 1'b1;
	INPUT[24] = #40000 1'b0;
	INPUT[24] = #20000 1'b1;
	INPUT[24] = #80000 1'b0;
end 
// \INPUT [ 23 ]
initial
begin
	INPUT[23] = 1'b1;
	INPUT[23] = #20000 1'b0;
	INPUT[23] = #80000 1'b1;
	INPUT[23] = #60000 1'b0;
	INPUT[23] = #20000 1'b1;
	INPUT[23] = #20000 1'b0;
	INPUT[23] = #20000 1'b1;
	INPUT[23] = #20000 1'b0;
	INPUT[23] = #100000 1'b1;
	INPUT[23] = #40000 1'b0;
	INPUT[23] = #20000 1'b1;
	INPUT[23] = #60000 1'b0;
	INPUT[23] = #20000 1'b1;
	INPUT[23] = #20000 1'b0;
	INPUT[23] = #40000 1'b1;
	INPUT[23] = #20000 1'b0;
	INPUT[23] = #40000 1'b1;
	INPUT[23] = #80000 1'b0;
	INPUT[23] = #100000 1'b1;
	INPUT[23] = #20000 1'b0;
	INPUT[23] = #40000 1'b1;
	INPUT[23] = #20000 1'b0;
	INPUT[23] = #60000 1'b1;
	INPUT[23] = #40000 1'b0;
	INPUT[23] = #20000 1'b1;
end 
// \INPUT [ 22 ]
initial
begin
	INPUT[22] = 1'b1;
	INPUT[22] = #40000 1'b0;
	INPUT[22] = #20000 1'b1;
	INPUT[22] = #20000 1'b0;
	INPUT[22] = #20000 1'b1;
	INPUT[22] = #40000 1'b0;
	INPUT[22] = #60000 1'b1;
	INPUT[22] = #20000 1'b0;
	INPUT[22] = #20000 1'b1;
	INPUT[22] = #40000 1'b0;
	INPUT[22] = #20000 1'b1;
	INPUT[22] = #20000 1'b0;
	INPUT[22] = #60000 1'b1;
	INPUT[22] = #20000 1'b0;
	INPUT[22] = #20000 1'b1;
	INPUT[22] = #60000 1'b0;
	INPUT[22] = #80000 1'b1;
	INPUT[22] = #20000 1'b0;
	INPUT[22] = #60000 1'b1;
	INPUT[22] = #20000 1'b0;
	INPUT[22] = #20000 1'b1;
	INPUT[22] = #20000 1'b0;
	INPUT[22] = #20000 1'b1;
	INPUT[22] = #40000 1'b0;
	INPUT[22] = #60000 1'b1;
	INPUT[22] = #60000 1'b0;
	INPUT[22] = #20000 1'b1;
	INPUT[22] = #20000 1'b0;
	INPUT[22] = #60000 1'b1;
end 
// \INPUT [ 21 ]
initial
begin
	INPUT[21] = 1'b0;
	INPUT[21] = #80000 1'b1;
	INPUT[21] = #20000 1'b0;
	INPUT[21] = #20000 1'b1;
	INPUT[21] = #60000 1'b0;
	INPUT[21] = #20000 1'b1;
	INPUT[21] = #60000 1'b0;
	INPUT[21] = #20000 1'b1;
	INPUT[21] = #60000 1'b0;
	INPUT[21] = #20000 1'b1;
	INPUT[21] = #20000 1'b0;
	INPUT[21] = #60000 1'b1;
	INPUT[21] = #40000 1'b0;
	INPUT[21] = #20000 1'b1;
	INPUT[21] = #40000 1'b0;
	INPUT[21] = #100000 1'b1;
	INPUT[21] = #100000 1'b0;
	INPUT[21] = #20000 1'b1;
	INPUT[21] = #20000 1'b0;
	INPUT[21] = #60000 1'b1;
	INPUT[21] = #80000 1'b0;
	INPUT[21] = #60000 1'b1;
end 
// \INPUT [ 20 ]
initial
begin
	INPUT[20] = 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #120000 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #100000 1'b0;
	INPUT[20] = #40000 1'b1;
	INPUT[20] = #20000 1'b0;
	INPUT[20] = #60000 1'b1;
	INPUT[20] = #40000 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #60000 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #40000 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #20000 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #20000 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #20000 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #20000 1'b0;
	INPUT[20] = #80000 1'b1;
	INPUT[20] = #100000 1'b0;
	INPUT[20] = #20000 1'b1;
	INPUT[20] = #20000 1'b0;
end 
// \INPUT [ 19 ]
initial
begin
	INPUT[19] = 1'b0;
	INPUT[19] = #40000 1'b1;
	INPUT[19] = #20000 1'b0;
	INPUT[19] = #120000 1'b1;
	INPUT[19] = #100000 1'b0;
	INPUT[19] = #20000 1'b1;
	INPUT[19] = #20000 1'b0;
	INPUT[19] = #40000 1'b1;
	INPUT[19] = #20000 1'b0;
	INPUT[19] = #120000 1'b1;
	INPUT[19] = #20000 1'b0;
	INPUT[19] = #20000 1'b1;
	INPUT[19] = #100000 1'b0;
	INPUT[19] = #40000 1'b1;
	INPUT[19] = #40000 1'b0;
	INPUT[19] = #20000 1'b1;
	INPUT[19] = #20000 1'b0;
	INPUT[19] = #60000 1'b1;
	INPUT[19] = #20000 1'b0;
	INPUT[19] = #20000 1'b1;
	INPUT[19] = #60000 1'b0;
	INPUT[19] = #40000 1'b1;
	INPUT[19] = #20000 1'b0;
end 
// \INPUT [ 18 ]
initial
begin
	INPUT[18] = 1'b0;
	INPUT[18] = #80000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #20000 1'b1;
	INPUT[18] = #80000 1'b0;
	INPUT[18] = #40000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #20000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #20000 1'b1;
	INPUT[18] = #140000 1'b0;
	INPUT[18] = #20000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #20000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #80000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #20000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #40000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #40000 1'b1;
	INPUT[18] = #20000 1'b0;
	INPUT[18] = #20000 1'b1;
	INPUT[18] = #40000 1'b0;
	INPUT[18] = #40000 1'b1;
end 
// \INPUT [ 17 ]
initial
begin
	INPUT[17] = 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #40000 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #60000 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #20000 1'b1;
	INPUT[17] = #60000 1'b0;
	INPUT[17] = #40000 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #20000 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #60000 1'b1;
	INPUT[17] = #40000 1'b0;
	INPUT[17] = #20000 1'b1;
	INPUT[17] = #140000 1'b0;
	INPUT[17] = #20000 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #40000 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #20000 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #60000 1'b1;
	INPUT[17] = #60000 1'b0;
	INPUT[17] = #20000 1'b1;
	INPUT[17] = #20000 1'b0;
	INPUT[17] = #20000 1'b1;
	INPUT[17] = #20000 1'b0;
end 
// \INPUT [ 16 ]
initial
begin
	INPUT[16] = 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #20000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #60000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #60000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #40000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #40000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #20000 1'b0;
	INPUT[16] = #40000 1'b1;
	INPUT[16] = #180000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #20000 1'b0;
	INPUT[16] = #80000 1'b1;
	INPUT[16] = #40000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #40000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #20000 1'b0;
	INPUT[16] = #20000 1'b1;
	INPUT[16] = #20000 1'b0;
end 
// \INPUT [ 15 ]
initial
begin
	INPUT[15] = 1'b1;
	INPUT[15] = #80000 1'b0;
	INPUT[15] = #20000 1'b1;
	INPUT[15] = #80000 1'b0;
	INPUT[15] = #20000 1'b1;
	INPUT[15] = #60000 1'b0;
	INPUT[15] = #60000 1'b1;
	INPUT[15] = #80000 1'b0;
	INPUT[15] = #20000 1'b1;
	INPUT[15] = #20000 1'b0;
	INPUT[15] = #40000 1'b1;
	INPUT[15] = #60000 1'b0;
	INPUT[15] = #40000 1'b1;
	INPUT[15] = #40000 1'b0;
	INPUT[15] = #20000 1'b1;
	INPUT[15] = #60000 1'b0;
	INPUT[15] = #60000 1'b1;
	INPUT[15] = #80000 1'b0;
	INPUT[15] = #20000 1'b1;
	INPUT[15] = #60000 1'b0;
	INPUT[15] = #60000 1'b1;
end 
// \INPUT [ 14 ]
initial
begin
	INPUT[14] = 1'b1;
	INPUT[14] = #20000 1'b0;
	INPUT[14] = #60000 1'b1;
	INPUT[14] = #20000 1'b0;
	INPUT[14] = #40000 1'b1;
	INPUT[14] = #60000 1'b0;
	INPUT[14] = #20000 1'b1;
	INPUT[14] = #20000 1'b0;
	INPUT[14] = #20000 1'b1;
	INPUT[14] = #20000 1'b0;
	INPUT[14] = #20000 1'b1;
	INPUT[14] = #100000 1'b0;
	INPUT[14] = #40000 1'b1;
	INPUT[14] = #20000 1'b0;
	INPUT[14] = #40000 1'b1;
	INPUT[14] = #80000 1'b0;
	INPUT[14] = #40000 1'b1;
	INPUT[14] = #60000 1'b0;
	INPUT[14] = #100000 1'b1;
	INPUT[14] = #20000 1'b0;
	INPUT[14] = #40000 1'b1;
	INPUT[14] = #20000 1'b0;
	INPUT[14] = #20000 1'b1;
	INPUT[14] = #80000 1'b0;
	INPUT[14] = #20000 1'b1;
end 
// \INPUT [ 13 ]
initial
begin
	INPUT[13] = 1'b0;
	INPUT[13] = #60000 1'b1;
	INPUT[13] = #80000 1'b0;
	INPUT[13] = #60000 1'b1;
	INPUT[13] = #40000 1'b0;
	INPUT[13] = #60000 1'b1;
	INPUT[13] = #40000 1'b0;
	INPUT[13] = #80000 1'b1;
	INPUT[13] = #20000 1'b0;
	INPUT[13] = #40000 1'b1;
	INPUT[13] = #40000 1'b0;
	INPUT[13] = #20000 1'b1;
	INPUT[13] = #40000 1'b0;
	INPUT[13] = #40000 1'b1;
	INPUT[13] = #20000 1'b0;
	INPUT[13] = #40000 1'b1;
	INPUT[13] = #20000 1'b0;
	INPUT[13] = #80000 1'b1;
	INPUT[13] = #40000 1'b0;
	INPUT[13] = #20000 1'b1;
	INPUT[13] = #40000 1'b0;
	INPUT[13] = #40000 1'b1;
	INPUT[13] = #20000 1'b0;
	INPUT[13] = #20000 1'b1;
	INPUT[13] = #20000 1'b0;
end 
// \INPUT [ 12 ]
initial
begin
	INPUT[12] = 1'b1;
	INPUT[12] = #40000 1'b0;
	INPUT[12] = #20000 1'b1;
	INPUT[12] = #20000 1'b0;
	INPUT[12] = #20000 1'b1;
	INPUT[12] = #20000 1'b0;
	INPUT[12] = #120000 1'b1;
	INPUT[12] = #20000 1'b0;
	INPUT[12] = #40000 1'b1;
	INPUT[12] = #20000 1'b0;
	INPUT[12] = #60000 1'b1;
	INPUT[12] = #60000 1'b0;
	INPUT[12] = #20000 1'b1;
	INPUT[12] = #40000 1'b0;
	INPUT[12] = #40000 1'b1;
	INPUT[12] = #60000 1'b0;
	INPUT[12] = #40000 1'b1;
	INPUT[12] = #20000 1'b0;
	INPUT[12] = #20000 1'b1;
	INPUT[12] = #40000 1'b0;
	INPUT[12] = #60000 1'b1;
	INPUT[12] = #40000 1'b0;
	INPUT[12] = #20000 1'b1;
	INPUT[12] = #40000 1'b0;
	INPUT[12] = #60000 1'b1;
	INPUT[12] = #20000 1'b0;
	INPUT[12] = #20000 1'b1;
end 
// \INPUT [ 11 ]
initial
begin
	INPUT[11] = 1'b0;
	INPUT[11] = #20000 1'b1;
	INPUT[11] = #20000 1'b0;
	INPUT[11] = #20000 1'b1;
	INPUT[11] = #100000 1'b0;
	INPUT[11] = #20000 1'b1;
	INPUT[11] = #60000 1'b0;
	INPUT[11] = #100000 1'b1;
	INPUT[11] = #100000 1'b0;
	INPUT[11] = #20000 1'b1;
	INPUT[11] = #80000 1'b0;
	INPUT[11] = #60000 1'b1;
	INPUT[11] = #20000 1'b0;
	INPUT[11] = #20000 1'b1;
	INPUT[11] = #20000 1'b0;
	INPUT[11] = #60000 1'b1;
	INPUT[11] = #20000 1'b0;
	INPUT[11] = #40000 1'b1;
	INPUT[11] = #20000 1'b0;
	INPUT[11] = #60000 1'b1;
	INPUT[11] = #40000 1'b0;
	INPUT[11] = #60000 1'b1;
	INPUT[11] = #20000 1'b0;
end 
// \INPUT [ 10 ]
initial
begin
	INPUT[10] = 1'b1;
	INPUT[10] = #20000 1'b0;
	INPUT[10] = #20000 1'b1;
	INPUT[10] = #60000 1'b0;
	INPUT[10] = #60000 1'b1;
	INPUT[10] = #20000 1'b0;
	INPUT[10] = #20000 1'b1;
	INPUT[10] = #80000 1'b0;
	INPUT[10] = #20000 1'b1;
	INPUT[10] = #80000 1'b0;
	INPUT[10] = #40000 1'b1;
	INPUT[10] = #20000 1'b0;
	INPUT[10] = #40000 1'b1;
	INPUT[10] = #20000 1'b0;
	INPUT[10] = #20000 1'b1;
	INPUT[10] = #40000 1'b0;
	INPUT[10] = #40000 1'b1;
	INPUT[10] = #20000 1'b0;
	INPUT[10] = #60000 1'b1;
	INPUT[10] = #40000 1'b0;
	INPUT[10] = #20000 1'b1;
	INPUT[10] = #40000 1'b0;
	INPUT[10] = #40000 1'b1;
	INPUT[10] = #20000 1'b0;
	INPUT[10] = #60000 1'b1;
end 
// \INPUT [ 9 ]
initial
begin
	INPUT[9] = 1'b1;
	INPUT[9] = #60000 1'b0;
	INPUT[9] = #40000 1'b1;
	INPUT[9] = #140000 1'b0;
	INPUT[9] = #20000 1'b1;
	INPUT[9] = #40000 1'b0;
	INPUT[9] = #80000 1'b1;
	INPUT[9] = #60000 1'b0;
	INPUT[9] = #20000 1'b1;
	INPUT[9] = #20000 1'b0;
	INPUT[9] = #60000 1'b1;
	INPUT[9] = #20000 1'b0;
	INPUT[9] = #40000 1'b1;
	INPUT[9] = #20000 1'b0;
	INPUT[9] = #140000 1'b1;
	INPUT[9] = #40000 1'b0;
	INPUT[9] = #40000 1'b1;
	INPUT[9] = #20000 1'b0;
	INPUT[9] = #20000 1'b1;
	INPUT[9] = #40000 1'b0;
	INPUT[9] = #40000 1'b1;
	INPUT[9] = #20000 1'b0;
end 
// \INPUT [ 8 ]
initial
begin
	INPUT[8] = 1'b1;
	INPUT[8] = #40000 1'b0;
	INPUT[8] = #60000 1'b1;
	INPUT[8] = #40000 1'b0;
	INPUT[8] = #40000 1'b1;
	INPUT[8] = #40000 1'b0;
	INPUT[8] = #20000 1'b1;
	INPUT[8] = #120000 1'b0;
	INPUT[8] = #20000 1'b1;
	INPUT[8] = #40000 1'b0;
	INPUT[8] = #20000 1'b1;
	INPUT[8] = #40000 1'b0;
	INPUT[8] = #40000 1'b1;
	INPUT[8] = #20000 1'b0;
	INPUT[8] = #20000 1'b1;
	INPUT[8] = #20000 1'b0;
	INPUT[8] = #40000 1'b1;
	INPUT[8] = #40000 1'b0;
	INPUT[8] = #20000 1'b1;
	INPUT[8] = #40000 1'b0;
	INPUT[8] = #40000 1'b1;
	INPUT[8] = #20000 1'b0;
	INPUT[8] = #20000 1'b1;
	INPUT[8] = #20000 1'b0;
	INPUT[8] = #80000 1'b1;
	INPUT[8] = #60000 1'b0;
end 
// \INPUT [ 7 ]
initial
begin
	INPUT[7] = 1'b1;
	INPUT[7] = #20000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #40000 1'b0;
	INPUT[7] = #40000 1'b1;
	INPUT[7] = #40000 1'b0;
	INPUT[7] = #40000 1'b1;
	INPUT[7] = #40000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #20000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #40000 1'b0;
	INPUT[7] = #100000 1'b1;
	INPUT[7] = #20000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #40000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #20000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #20000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #20000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #80000 1'b0;
	INPUT[7] = #40000 1'b1;
	INPUT[7] = #120000 1'b0;
	INPUT[7] = #20000 1'b1;
	INPUT[7] = #20000 1'b0;
	INPUT[7] = #40000 1'b1;
end 
// \INPUT [ 6 ]
initial
begin
	INPUT[6] = 1'b1;
	INPUT[6] = #40000 1'b0;
	INPUT[6] = #80000 1'b1;
	INPUT[6] = #60000 1'b0;
	INPUT[6] = #80000 1'b1;
	INPUT[6] = #20000 1'b0;
	INPUT[6] = #60000 1'b1;
	INPUT[6] = #40000 1'b0;
	INPUT[6] = #20000 1'b1;
	INPUT[6] = #20000 1'b0;
	INPUT[6] = #80000 1'b1;
	INPUT[6] = #20000 1'b0;
	INPUT[6] = #40000 1'b1;
	INPUT[6] = #20000 1'b0;
	INPUT[6] = #100000 1'b1;
	INPUT[6] = #20000 1'b0;
	INPUT[6] = #60000 1'b1;
	INPUT[6] = #40000 1'b0;
	INPUT[6] = #20000 1'b1;
	INPUT[6] = #20000 1'b0;
	INPUT[6] = #20000 1'b1;
	INPUT[6] = #20000 1'b0;
	INPUT[6] = #20000 1'b1;
	INPUT[6] = #80000 1'b0;
end 
// \INPUT [ 5 ]
initial
begin
	INPUT[5] = 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #20000 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #40000 1'b1;
	INPUT[5] = #60000 1'b0;
	INPUT[5] = #20000 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #20000 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #20000 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #20000 1'b1;
	INPUT[5] = #40000 1'b0;
	INPUT[5] = #40000 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #20000 1'b1;
	INPUT[5] = #80000 1'b0;
	INPUT[5] = #40000 1'b1;
	INPUT[5] = #40000 1'b0;
	INPUT[5] = #40000 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #20000 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #80000 1'b1;
	INPUT[5] = #80000 1'b0;
	INPUT[5] = #40000 1'b1;
	INPUT[5] = #20000 1'b0;
	INPUT[5] = #20000 1'b1;
	INPUT[5] = #40000 1'b0;
end 
// \INPUT [ 4 ]
initial
begin
	INPUT[4] = 1'b1;
	INPUT[4] = #20000 1'b0;
	INPUT[4] = #40000 1'b1;
	INPUT[4] = #20000 1'b0;
	INPUT[4] = #100000 1'b1;
	INPUT[4] = #140000 1'b0;
	INPUT[4] = #60000 1'b1;
	INPUT[4] = #40000 1'b0;
	INPUT[4] = #80000 1'b1;
	INPUT[4] = #20000 1'b0;
	INPUT[4] = #20000 1'b1;
	INPUT[4] = #60000 1'b0;
	INPUT[4] = #20000 1'b1;
	INPUT[4] = #40000 1'b0;
	INPUT[4] = #20000 1'b1;
	INPUT[4] = #40000 1'b0;
	INPUT[4] = #20000 1'b1;
	INPUT[4] = #40000 1'b0;
	INPUT[4] = #120000 1'b1;
	INPUT[4] = #20000 1'b0;
	INPUT[4] = #20000 1'b1;
	INPUT[4] = #20000 1'b0;
	INPUT[4] = #20000 1'b1;
end 
// \INPUT [ 3 ]
initial
begin
	INPUT[3] = 1'b1;
	INPUT[3] = #20000 1'b0;
	INPUT[3] = #40000 1'b1;
	INPUT[3] = #60000 1'b0;
	INPUT[3] = #20000 1'b1;
	INPUT[3] = #60000 1'b0;
	INPUT[3] = #60000 1'b1;
	INPUT[3] = #20000 1'b0;
	INPUT[3] = #60000 1'b1;
	INPUT[3] = #20000 1'b0;
	INPUT[3] = #20000 1'b1;
	INPUT[3] = #40000 1'b0;
	INPUT[3] = #120000 1'b1;
	INPUT[3] = #100000 1'b0;
	INPUT[3] = #20000 1'b1;
	INPUT[3] = #40000 1'b0;
	INPUT[3] = #20000 1'b1;
	INPUT[3] = #20000 1'b0;
	INPUT[3] = #40000 1'b1;
	INPUT[3] = #20000 1'b0;
	INPUT[3] = #60000 1'b1;
	INPUT[3] = #40000 1'b0;
	INPUT[3] = #80000 1'b1;
end 
// \INPUT [ 2 ]
initial
begin
	INPUT[2] = 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #60000 1'b0;
	INPUT[2] = #60000 1'b1;
	INPUT[2] = #40000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #20000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #20000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #20000 1'b0;
	INPUT[2] = #40000 1'b1;
	INPUT[2] = #80000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #40000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #20000 1'b0;
	INPUT[2] = #60000 1'b1;
	INPUT[2] = #20000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #20000 1'b0;
	INPUT[2] = #40000 1'b1;
	INPUT[2] = #40000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #40000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #20000 1'b0;
	INPUT[2] = #20000 1'b1;
	INPUT[2] = #40000 1'b0;
	INPUT[2] = #20000 1'b1;
end 
// \INPUT [ 1 ]
initial
begin
	INPUT[1] = 1'b1;
	INPUT[1] = #20000 1'b0;
	INPUT[1] = #20000 1'b1;
	INPUT[1] = #40000 1'b0;
	INPUT[1] = #20000 1'b1;
	INPUT[1] = #20000 1'b0;
	INPUT[1] = #20000 1'b1;
	INPUT[1] = #60000 1'b0;
	INPUT[1] = #20000 1'b1;
	INPUT[1] = #60000 1'b0;
	INPUT[1] = #20000 1'b1;
	INPUT[1] = #40000 1'b0;
	INPUT[1] = #40000 1'b1;
	INPUT[1] = #40000 1'b0;
	INPUT[1] = #20000 1'b1;
	INPUT[1] = #80000 1'b0;
	INPUT[1] = #20000 1'b1;
	INPUT[1] = #60000 1'b0;
	INPUT[1] = #60000 1'b1;
	INPUT[1] = #20000 1'b0;
	INPUT[1] = #40000 1'b1;
	INPUT[1] = #40000 1'b0;
	INPUT[1] = #60000 1'b1;
	INPUT[1] = #20000 1'b0;
	INPUT[1] = #20000 1'b1;
	INPUT[1] = #40000 1'b0;
	INPUT[1] = #40000 1'b1;
	INPUT[1] = #20000 1'b0;
	INPUT[1] = #20000 1'b1;
end 
// \INPUT [ 0 ]
initial
begin
	INPUT[0] = 1'b0;
	INPUT[0] = #40000 1'b1;
	INPUT[0] = #20000 1'b0;
	INPUT[0] = #80000 1'b1;
	INPUT[0] = #20000 1'b0;
	INPUT[0] = #40000 1'b1;
	INPUT[0] = #20000 1'b0;
	INPUT[0] = #40000 1'b1;
	INPUT[0] = #80000 1'b0;
	INPUT[0] = #140000 1'b1;
	INPUT[0] = #40000 1'b0;
	INPUT[0] = #40000 1'b1;
	INPUT[0] = #60000 1'b0;
	INPUT[0] = #20000 1'b1;
	INPUT[0] = #20000 1'b0;
	INPUT[0] = #40000 1'b1;
	INPUT[0] = #20000 1'b0;
	INPUT[0] = #60000 1'b1;
	INPUT[0] = #20000 1'b0;
	INPUT[0] = #60000 1'b1;
	INPUT[0] = #20000 1'b0;
	INPUT[0] = #20000 1'b1;
	INPUT[0] = #20000 1'b0;
	INPUT[0] = #20000 1'b1;
	INPUT[0] = #40000 1'b0;
end 

// READ_EN_A
initial
begin
	READ_EN_A = 1'b1;
end 

// READ_EN_B
initial
begin
	READ_EN_B = 1'b1;
end 

register_file_vlg_sample_tst tb_sample (
	.ADD0(ADD0),
	.ADD1(ADD1),
	.ADD2(ADD2),
	.ADD3(ADD3),
	.ADD4(ADD4),
	.ADD20(ADD20),
	.ADD21(ADD21),
	.ADD22(ADD22),
	.ADD23(ADD23),
	.ADD24(ADD24),
	.ADD30(ADD30),
	.ADD31(ADD31),
	.ADD32(ADD32),
	.ADD33(ADD33),
	.ADD34(ADD34),
	.CLK(CLK),
	.INPUT(INPUT),
	.READ_EN_A(READ_EN_A),
	.READ_EN_B(READ_EN_B),
	.WE(WE),
	.sampler_tx(sampler)
);

register_file_vlg_check_tst tb_out(
	.OUTA(OUTA),
	.OUTB(OUTB),
	.sampler_rx(sampler)
);
endmodule

